// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.88.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Cron.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;

    using global::FakeItEasy;

    using global::Naos.Cron;

    using global::OBeautifulCode.AutoFakeItEasy;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.88.0")]
    public abstract class DefaultCronDummyFactory : IDummyFactory
    {
        public DefaultCronDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DailyScheduleInUtc
                             {
                                 Hour   = A.Dummy<int>(),
                                 Minute = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ExpressionSchedule
                             {
                                 CronExpression = A.Dummy<string>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HourlySchedule
                             {
                                 Minute = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new IntervalSchedule
                             {
                                 Interval = A.Dummy<TimeSpan>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MonthlyScheduleInUtc
                             {
                                 DaysOfMonth = A.Dummy<int[]>(),
                                 Hour        = A.Dummy<int>(),
                                 Minute      = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullSchedule());


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<ScheduleBase>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new WeeklyScheduleInUtc
                             {
                                 DaysOfWeek = A.Dummy<DayOfWeek[]>(),
                                 Hour       = A.Dummy<int>(),
                                 Minute     = A.Dummy<int>(),
                             });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new YearlyScheduleInUtc
                             {
                                 MonthsOfYear = A.Dummy<MonthOfYear[]>(),
                                 DaysOfMonth  = A.Dummy<int[]>(),
                                 Hour         = A.Dummy<int>(),
                                 Minute       = A.Dummy<int>(),
                             });
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}